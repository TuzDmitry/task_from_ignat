{"version":3,"sources":["Monday/MyComponent/MyComponent.module.css","Monday/Qualities/Quality/Quality.module.css","Loading/Loading.module.css","Monday/Qualities/Qualities.module.css","NavBar/NavBar.jsx","Monday/MyComponent/MyComponent.jsx","Monday/Qualities/Quality/Quality.jsx","Monday/Qualities/Qualities.jsx","Monday/ComponentSpINBut/Components3Parts/InnerSpan.jsx","Monday/ComponentSpINBut/Components3Parts/InnerButton.jsx","Monday/ComponentSpINBut/Components3Parts/InnerInput.jsx","Monday/ComponentSpINBut/Components3Parts/NameItem/NameItem.jsx","Monday/ComponentSpINBut/Components3Parts/InnerListOfNames.jsx","Monday/ComponentSpINBut/Component3.jsx","Monday/Monday.jsx","Tuesday/TodoList/todoComponents/TodoListHeader.jsx","Tuesday/TodoList/todoComponents/TodoListTask.jsx","Tuesday/TodoList/todoComponents/TodoListTasks.jsx","Tuesday/TodoList/todoComponents/TodoListFooter.jsx","Tuesday/TodoList/functions.jsx","Tuesday/TodoList/TodoList.jsx","Tuesday/Tuesday.jsx","Loading/Loading.jsx","App.jsx","serviceWorker.js","index.jsx","Monday/ComponentSpINBut/Component3.module.css","NavBar/NavBar.module.css"],"names":["module","exports","NavBar","state","isHiddenPanel","ShowHidePanel","setState","render","classForHidePanel","style","barPanel","hide","classForButton","barButton","barButtonShow","barButtonHide","className","bar","onClick","barItem","activeClassName","activeLink","to","React","Component","MyComponent","my","block","lastName","time","type","value","readOnly","Quality","props","activeSkill","skill","Qualities","builder","arraySkills","map","el","i","numberSkill","key","qua","active_block","quaS","InnerSpan","sp","nameCounter","InnerButton","but","getName","InnerInput","onEnterPress","e","classNameInput","error","inp","onChange","onChangeInput","title","onKeyPress","NameItem","name","InnerListOfNames","nameElements","listOfNames","listNames","Component3","n","currentTarget","console","log","currentName","getNameForAlert","componet3","length","Monday","TodoListHeader","onAddTaskClick","newText","addTask","onTitleChanged","placeholder","TodoListTask","onIsDoneChanged","changeStatus","task","id","checked","text","action","upDateTitleActionCreator","pseudoDispatch","onPriorityChanged","upDatePriorityActionCreator","onCloseClick","deleteTask","editContentMode","editPriorityMode","activateEditMode","deActivateEditMode","classForIsDone","isDone","onBlur","autoFocus","multiple","size","priority","TodoListTasks","taskElements","tasks","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","saveState","localStorage","setItem","JSON","stringify","TodoList","nextTaskId","newTask","newTasks","taskId","filter","t","index","newfilterValue","changeTask","newPropsObj","newValue","x","stateAsString","getItem","parse","restoreState","this","Tuesday","Loading","loadingContainer","loadingBlock","App","ChooseActiveSkill","loading","newName","newNames","path","setTimeout","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1243bdb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"MyComponent_block__r8ykL\",\"time\":\"MyComponent_time__1jBvR\",\"lastName\":\"MyComponent_lastName__2fI4r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Quality_block__1_Dpe\",\"active_block\":\"Quality_active_block__v35qW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"Loading_loadingContainer__1GxDk\",\"loadingBlock\":\"Loading_loadingBlock__3R-Op\",\"transforming\":\"Loading_transforming__3OZIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Qualities_block__1tadQ\"};","import React from 'react';\nimport style from './NavBar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBar extends React.Component {\n\n    state = {\n        isHiddenPanel: true\n    }\n\n    ShowHidePanel = () => {\n        if (this.state.isHiddenPanel) {\n            this.setState({isHiddenPanel: false})\n        }\n        if (!this.state.isHiddenPanel) {\n            this.setState({isHiddenPanel: true})\n        }\n    }\n\n\n    render = () => {\n        let classForHidePanel = this.state.isHiddenPanel ? `${style.barPanel} ${style.hide}` : `${style.barPanel}`;\n        let classForButton = this.state.isHiddenPanel ? `${style.barButton} ${style.barButtonShow}` : `${style.barButton} ${style.barButtonHide}`;\n\n        return (\n\n\n            <div className={style.bar}>\n                <div className={classForButton} onClick={this.ShowHidePanel}>\n                </div>\n                <div className={classForHidePanel}>\n                    <div className={style.barItem}>\n                        <NavLink activeClassName={style.activeLink} to=\"/monday\">Monday</NavLink>\n                    </div>\n\n                    <div className={style.barItem}>\n                        <NavLink activeClassName={style.activeLink} to=\"/tuesday\">Tuesday</NavLink>\n                    </div>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport my from './MyComponent.module.css'\n\nclass MyComponent extends React.Component {\n\n    render = () => {\n        return (\n            <div className={my.block}>\n                <div className={my.lastName}>Tuz Dmitry</div>\n                <div>домашка от меня №1: создать проект и выложить на github:\n                    - создать компоненту, которая красиво будет выводить ваше ФИО\n                    - *** создать компоненту, которая будет выводить текст, стилизованно как в телеграмме (имя, текст,\n                    время, уголок)\n                </div>\n                <input className={my.time} type=\"time\" value=\"12:15\" readOnly/>\n            </div>\n        );\n    }\n}\n\nexport default MyComponent;\n","import React from 'react';\n// import qua from './Quality.module.css'\n\n\nclass Quality extends React.Component {\n\n    render = () => {\n\n\n        return (\n            <div className={this.props.activeSkill}>\n                <div>{this.props.skill}</div>\n                <div>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div>\n            </div>\n        );\n    }\n}\n\nexport default Quality;\n","import React from 'react';\nimport quaS from './Qualities.module.css'\nimport Quality from \"./Quality/Quality\";\nimport qua from \"./Quality/Quality.module.css\";\n\nclass Qualities extends React.Component {\n    render = () => {\n\n        // let arraySkills=[{skill:\"рационалист\"},{skill:\"комуннист\"},{skill:\"анимешник\"}];\n        let builder = this.props.arraySkills.map((el, i) => {\n                if (i === this.props.numberSkill) {\n                    return (\n                        <Quality key={i} skill={el.skill} activeSkill={`${qua.block} ${qua.active_block}`}/>\n                    )\n                } else {\n                    return (\n                        <Quality skill={el.skill} activeSkill={qua.block}/>\n                    )\n                }\n            }\n        );\n\n\n        return (\n            <div className={quaS.block}>\n                {builder}\n                {/*<Quality skill={this.props.arraySkills[0].skill}/>*/}\n                {/*<Quality skill={this.props.arraySkills[1].skill}/>*/}\n                {/*<Quality skill={this.props.arraySkills[2].skill}/>*/}\n            </div>\n        );\n    }\n}\n\nexport default Qualities;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerSpan extends React.Component {\n\n\n\n    render = () => {\n        return (\n            <div className=\"\">\n                <span className={style.sp}>{this.props.nameCounter}</span>\n            </div>\n        );\n    }\n}\n\nexport default InnerSpan;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerButton extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className=\"\">\n                <button className={style.but}\n                        onClick={this.props.getName}>Push me</button>\n            </div>\n        );\n    }\n}\n\nexport default InnerButton;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerInput extends React.Component {\n    onEnterPress=(e)=>{\n        if(e.key === \"Enter\"){this.props.getName()}\n    }\n\n\n    render = () => {\n        let classNameInput = !this.props.state.error ? `${style.error} ${style.inp}` : `${style.inp}`;\n        // let classNameInput = !this.props.state.title ? `${style.error} ${style.inp}` : `${style.inp}`;\n\n        return (\n            <div className=\"\">\n                <input className={classNameInput}\n                       // ref={this.props.inputNameRef}\n                       onChange={this.props.onChangeInput}\n                       value={this.props.state.title}\n                       onKeyPress={this.onEnterPress}\n                       type=\"text\" />\n            </div>\n        );\n    }\n}\n\nexport default InnerInput;\n","import React from 'react';\n\nimport style from '../../Component3.module.css'\n\nclass NameItem extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className={style.NameItem}>{this.props.name}</div>\n        );\n    }\n}\n\nexport default NameItem;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\nimport NameItem from \"./NameItem/NameItem\";\n\nclass InnerListOfNames extends React.Component {\n\n    render = () => {\n\n        let nameElements = this.props.listOfNames.map(el => <NameItem name={el.name}/>)\n\n\n        return (\n            <div className={style.listNames}>\n                {nameElements}\n            </div>\n        );\n    }\n}\n\nexport default InnerListOfNames;\n","import React from 'react';\n\nimport style from './Component3.module.css'\nimport InnerSpan from \"./Components3Parts/InnerSpan\";\nimport InnerButton from \"./Components3Parts/InnerButton\";\nimport InnerInput from \"./Components3Parts/InnerInput\";\nimport InnerListOfNames from \"./Components3Parts/InnerListOfNames\";\n\nclass Component3 extends React.Component {\n    // inputNameRef = React.createRef();\n\n    state = {\n        error: true,\n        title: \"\"\n    }\n\n    onChangeInput = (e) => {\n        let n = e.currentTarget.value;\n        this.setState({\n            title: n,\n            error: true\n        })\n        console.log(this.state)\n    }\n\n\n    getName = () => {\n        // let currentName = this.inputNameRef.current.value;\n        let currentName = this.state.title;\n        this.setState({title: ''})\n\n        if (!this.state.title) {\n            this.setState({error: false})\n        } else {\n            this.props.getNameForAlert(currentName)\n            this.setState({error: true})\n        }\n    }\n\n    // onPressEnter=()=>\n\n    render = () => {\n        return (\n            <div className={style.componet3}>\n                <div>\n                    <InnerSpan nameCounter={this.props.state.listOfNames.length}/>\n\n                    <InnerInput state={this.state}\n                                getName={this.getName}\n                                onChangeInput={this.onChangeInput}\n                        // inputNameRef={this.inputNameRef}\n                    />\n\n                    <InnerButton getName={this.getName}/>\n                </div>\n\n                <InnerListOfNames listOfNames={this.props.state.listOfNames}/>\n            </div>\n        );\n    }\n}\n\nexport default Component3;\n","import React from 'react';\nimport MyComponent from \"./MyComponent/MyComponent\";\nimport Qualities from \"./Qualities/Qualities\";\nimport Component3 from \"./ComponentSpINBut/Component3\";\n\n\nclass Monday extends React.Component {\n\n\n    render = () => {\n        return (\n            <div>\n                <MyComponent/>\n                <Qualities arraySkills={this.props.arraySkills} numberSkill={this.props.numberSkill}/>\n                <Component3 state={this.props.state}\n                            getNameForAlert={this.props.getNameForAlert}/>\n            </div>\n        );\n    }\n}\n\nexport default Monday;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TodoListHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.newTaskTitleRef = React.createRef(); //////////уже нам не нужен\r\n        /////создали ссылку на элемент <input ref={this.newTaskTitleRef}>//\r\n    }\r\n\r\n    state = {\r\n        error: true,\r\n        title: \"\"\r\n    }\r\n    onAddTaskClick = () => {\r\n        // let newText = this.newTaskTitleRef.current.value; //обратились к ссылке на эл-т и взяли у нее текущее значение///\r\n        //\r\n        // this.newTaskTitleRef.current.value = \"\";/////обнуляет наш импут(10)\r\n        let newText = this.state.title;\r\n        this.setState({title: \"\"})\r\n\r\n        if (newText === \"\") {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false})\r\n            this.props.addTask(newText); //вызвали ту ф-ю в родит. компоненте и подали в нее записаное в переменную newText значение инпута!\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddTaskClick()\r\n        }\r\n    };\r\n\r\n\r\n    render = () => {\r\n        let classNameInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"todoList-header\">\r\n                    <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n                    <div className=\"todoList-newTaskForm\">\r\n                        {/* input!! мы привязываем эту ссылку ref={this.newTaskTitleRef} на тебя!!!*/}\r\n                        <input\r\n                            // ref={this.newTaskTitleRef}     ///уже нам не нужна\r\n                            type=\"text\"\r\n                            className={classNameInput}\r\n                            onChange={this.onTitleChanged}\r\n                            value={this.state.title}\r\n                            onKeyPress={this.onKeyPress}\r\n                            placeholder=\"New task name\"/>\r\n\r\n                        {/*по клику на кнопку произойдет вызов ф-ии onAddTaskClick*/}\r\n                        <button onClick={this.onAddTaskClick}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;\r\n\r\nTodoListHeader.propTypes = {\r\n    // ________: PropTypes.____\r\n};","import React from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport {upDatePriorityActionCreator, upDateTitleActionCreator} from \"../TodoList\";\r\n\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        let text = e.currentTarget.value;\r\n        let id = this.props.task.id;\r\n        let action = upDateTitleActionCreator(text, id);\r\n        this.props.pseudoDispatch(action)\r\n    }\r\n    onPriorityChanged = (e) => {\r\n        let value = e.currentTarget.value;\r\n        let id = this.props.task.id;\r\n        let action = upDatePriorityActionCreator(value, id)\r\n        this.props.pseudoDispatch(action)\r\n    }\r\n\r\n    onCloseClick = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n    state = {\r\n        editContentMode: false,\r\n        editPriorityMode: false\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editContentMode: true\r\n        })\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editContentMode: false\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        let classForIsDone = this.props.task.isDone ? \"done\" : \"todoList-task\";\r\n        return (\r\n            <div className='taskContainer'>\r\n                <div className={classForIsDone}>\r\n                    <input type=\"checkbox\" onChange={this.onIsDoneChanged} checked={this.props.task.isDone}/>\r\n\r\n                    <span>{this.props.task.id}</span>\r\n                    {\r\n                        this.state.editContentMode\r\n                            ? <input onBlur={this.deActivateEditMode}\r\n                                     onChange={this.onTitleChanged}\r\n                                     value={this.props.task.title}\r\n                                     autoFocus={true}/>\r\n                            : <span onClick={this.activateEditMode}>-{this.props.task.title},</span>\r\n                    }\r\n\r\n                    <span>priority:\r\n                        {\r\n                            this.state.editPriorityMode\r\n                                ? <select multiple size=\"1\"\r\n                                          onBlur={() => this.setState({editPriorityMode: false})}\r\n                                          onChange={this.onPriorityChanged}>\r\n                                    <option>low</option>\r\n                                    <option>medium</option>\r\n                                    <option>hight</option>\r\n                                </select>\r\n\r\n                                : <span onClick={() => this.setState({editPriorityMode: true})}>\r\n                                {this.props.task.priority}\r\n                            </span>\r\n                        }\r\n                    </span>\r\n\r\n                </div>\r\n                <button onClick={this.onCloseClick}>x</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\nTodoListTask.propTypes = {\r\n    isDone: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    priority: PropTypes.string\r\n};","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let taskElements= this.props.tasks.map(task=>{\r\n            return <TodoListTask\r\n                pseudoDispatch={this.props.pseudoDispatch}\r\n                changeStatus={this.props.changeStatus}\r\n                deleteTask={this.props.deleteTask}\r\n                task={task}/>\r\n        })\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {taskElements}\r\n                {/*<TodoListTask title={this.props.tasks[0].title} isDone={this.props.tasks[0].isDone}/>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\nTodoListTasks.propTypes = {\r\n    tasks: PropTypes.array.isRequired\r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state={\r\n        isHidden: false\r\n    }\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")}\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")}\r\n    onShowFiltersClick = () => {this.setState({isHidden: false})}\r\n    onHideFiltersClick = () => {this.setState({isHidden: true})}\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"todoList-footer\">\r\n                    {!this.state.isHidden && <div className=\"btnHideShow\" onClick={this.onHideFiltersClick}>hide</div>}\r\n                    {this.state.isHidden && <div className=\"btnHideShow\" onClick={this.onShowFiltersClick}>show</div>}\r\n                    {!this.state.isHidden && <div>\r\n                        <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\r\n                        <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\r\n                        <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\nTodoListFooter.propTypes = {\r\n    filterValue: PropTypes.string\r\n};","\r\nexport const saveState = (state) => {\r\n    localStorage.setItem(\"our-state\", JSON.stringify(state));\r\n}\r\n\r\n\r\nexport const restoreState = () => {\r\n    let state = {\r\n        tasks: [],\r\n        filterValue: \"All\"\r\n    }\r\n    let stateAsString = localStorage.getItem(\"our-state\")\r\n    if (stateAsString) {\r\n        state = JSON.parse(stateAsString);\r\n    }\r\n    return state\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport './TodoList.css';\r\nimport TodoListHeader from \"./todoComponents/TodoListHeader\";\r\nimport TodoListTasks from \"./todoComponents/TodoListTasks\";\r\nimport TodoListFooter from \"./todoComponents/TodoListFooter\";\r\nimport {saveState, restoreState} from \"./functions\";\r\n\r\n// import PropTypes from \"prop-types\";\r\nconst UPADATE_PRIORITY_VALUE = 'UPADATE_PRIORITY_VALUE';\r\nconst UPADATE_TITLE_TEXT='UPADATE_TITLE_TEXT';\r\n\r\n\r\nclass TodoList extends React.Component {\r\n    nextTaskId = 0;\r\n\r\n    componentDidMount() {\r\n        let x = restoreState()\r\n        this.setState(x, () => {\r\n            // debugger;\r\n            this.nextTaskId = this.state.tasks.length\r\n            //////---------------------либо же\r\n            // this.state.tasks.forEach(task => {\r\n            //             if (task.id >= this.nextTaskId) {\r\n            //                 this.nextTaskId = task.id + 1\r\n            //             }\r\n            //         })\r\n            /////-----------------------------\r\n        })\r\n\r\n\r\n    }\r\n\r\n    state = {\r\n        tasks: [\r\n            // {id: 1, title: \"JS\", isDone: true, priority: 'low'},\r\n            // {id: 2, title: \"HTML\", isDone: true, priority: 'high'},\r\n        ], filterValue: \"All\"\r\n    }\r\n\r\n    // saveState = () => {\r\n    //     ////устанавливаем в localStorage под ключом \"our-state\"  наш стейт переделанный в  джейсон строку JSON.stringify(this.state)\r\n    //     localStorage.setItem(\"our-state\", JSON.stringify(this.state));\r\n    // }\r\n\r\n\r\n    // restoreState = () => {\r\n    //     /////объявляем наш стартовый стейт\r\n    //     let state = {\r\n    //         tasks: [],\r\n    //         filterValue: \"All\"\r\n    //     }\r\n    //     //// считываем сохраненную ранее строку из localStorage\r\n    //     let stateAsString = localStorage.getItem(\"our-state\")\r\n    //     ////если таковая есть, то превращаем строку в объект и призваиваем стейту знаение из стораджа.\r\n    //     if (stateAsString) {\r\n    //         state = JSON.parse(stateAsString);\r\n    //     }\r\n    //     ////устанавливаем стейт или пустой или востановленный в стейт\r\n    //     this.setState(state, () => {\r\n    //         ////одним махом в колбек сделаем сравнение счётчика для id\r\n    //         // this.nextTaskId = this.state.tasks.length   код который можено заменить на 4 строчки ниже\r\n    //         this.state.tasks.forEach(task => {\r\n    //             if (task.id >= this.nextTaskId) {\r\n    //                 this.nextTaskId = task.id + 1\r\n    //             }\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    addTask = (newText) => {\r\n        let newTask = {id: this.nextTaskId, title: newText, isDone: false, priority: 'low'};\r\n        this.nextTaskId++;\r\n        let newTasks = [...this.state.tasks, newTask] ///...this.state.tasks-- раскукоживаем старый массив\r\n        this.setState({tasks: newTasks}, () => saveState(this.state)) ///setState- метод реагирующий на изменение св-ва state\r\n    }\r\n    deleteTask = (taskId) => {\r\n        ///скопировали массив тасок в новую переменную\r\n        let newTasks = [...this.state.tasks]\r\n        ///убираем таску которую хотим удалить\r\n        newTasks = newTasks.filter((t) => t.id !== taskId)\r\n        ////переписали массив тасок с актуальными id\r\n        newTasks = newTasks.map((t, index) => {\r\n            return {...t, id: index}\r\n        })\r\n\r\n        ///----------------------------------------------------/код -равнозначный  строкам 78-82\r\n        // newTasks.splice(taskId, 1)\r\n        // newTasks =newTasks.map((t, index)=>{\r\n        //\r\n        //     return {...t, id:index}\r\n        // })\r\n        ///----------------------------------------------------\r\n        ///уменьшили переменную для следующего id\r\n        --this.nextTaskId;\r\n        // debugger;\r\n        this.setState({tasks: newTasks}, () => saveState(this.state)) ///setState- метод реагирующий на изменение св-ва state\r\n    }\r\n\r\n\r\n    changeFilter = (newfilterValue) => {\r\n        this.setState({filterValue: newfilterValue}, () => saveState(this.state));\r\n    }\r\n\r\n    changeTask = (taskId, newPropsObj) => {\r\n        let newTasks = this.state.tasks.map(t => {\r\n            if (t.id !== taskId) {\r\n                return t\r\n            } else {\r\n                return {...t, ...newPropsObj}\r\n            }\r\n        });\r\n\r\n        this.setState({tasks: newTasks}, () => {\r\n            saveState(this.state)\r\n        });\r\n    }\r\n\r\n    changeStatus = (taskId, isDone) => {\r\n        this.changeTask(taskId, {isDone: isDone})\r\n    }\r\n\r\n    pseudoDispatch = (action) => {\r\n        if (action.type === UPADATE_TITLE_TEXT) {\r\n            this.changeTask(action.id, {title: action.newText})\r\n        } else if (action.type === UPADATE_PRIORITY_VALUE) {\r\n            {\r\n                this.changeTask(action.id, {priority: action.newValue})\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className=\"Todo\">\r\n                <div className=\"todoList\">\r\n                    <TodoListHeader addTask={this.addTask}/>\r\n                    <TodoListTasks\r\n                        pseudoDispatch={this.pseudoDispatch}\r\n                        changeStatus={this.changeStatus}\r\n                        deleteTask={this.deleteTask}\r\n                        tasks={this.state.tasks.filter(t => {\r\n                                switch (this.state.filterValue) {\r\n                                    case \"All\":\r\n                                        return true;\r\n                                    case \"Completed\":\r\n                                        return t.isDone;\r\n                                    case \"Active\":\r\n                                        return (!t.isDone);\r\n                                    default:\r\n                                        return true;\r\n                                }\r\n                            }\r\n                        )}/>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n\r\n\r\nexport const upDateTitleActionCreator = (text, id) => ({type: UPADATE_TITLE_TEXT, newText: text, id: id})\r\nexport const upDatePriorityActionCreator = (value, id) => ({type: UPADATE_PRIORITY_VALUE, newValue: value, id: id})\r\n\r\n\r\n// App.propTypes = {\r\n//     // _________: PropTypes.string\r\n// };\r\n","import React from 'react';\nimport TodoList from \"./TodoList/TodoList\";\n\n// import style from '../Component3.module.css'\n\nclass Tuesday extends React.Component {\n\n\n    render = () => {\n        return (\n            <div >\n                <TodoList />\n            </div>\n        );\n    }\n}\n\nexport default Tuesday;\n","import React from 'react';\nimport style from './Loading.module.css';\n\n\nclass Loading extends React.Component {\n\n    render = () => {\n        return (\n            <div className={style.loadingContainer}>\n                <div className={style.loadingBlock}>loading</div>\n            </div>\n        );\n    }\n}\n\nexport default Loading;\n","import React from 'react';\nimport './App.css';\n\nimport NavBar from \"./NavBar/NavBar\";\nimport Monday from \"./Monday/Monday\";\nimport Tuesday from \"./Tuesday/Tuesday\";\nimport {Route} from \"react-router-dom\";\nimport Loading from \"./Loading/Loading\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({loading: false})\n        }, 3000)\n    }\n\n    arraySkills =\n        [\n            {skill: \"рационалист\"},\n            {skill: \"комуннист\"},\n            {skill: \"анимешник\"}\n        ];\n\n    ChooseActiveSkill = 0;\n\n    state = {\n        loading: true,\n        listOfNames: [\n            // {name: \"Alla\"},\n            // {name: \"Sasha\"}\n        ]\n    };\n\n\n    getNameForAlert = (currentName) => {\n        if (currentName) {\n\n            let newName = {name: currentName}\n            let newNames = [...this.state.listOfNames, newName];\n\n            this.setState({listOfNames: newNames});\n            // alert(currentName);\n        }\n    }\n\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                {this.state.loading &&\n                <>\n                    <div></div>\n                    <Loading />\n                    </>}\n                {!this.state.loading &&\n                <>\n                    <div>\n                        <NavBar/>\n                    </div>\n                    <div className=\"app-wrapper\">\n                        <Route path='/monday' render={() => <Monday arraySkills={this.arraySkills}\n                                                                    numberSkill={this.ChooseActiveSkill}\n                                                                    state={this.state}\n                                                                    getNameForAlert={this.getNameForAlert}/>}/>\n                        <Route path='/tuesday' render={() => <Tuesday/>}/>\n\n                    </div>\n                </>}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <App/>\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componet3\":\"Component3_componet3__1AHWo\",\"sp\":\"Component3_sp__2rkOt\",\"inp\":\"Component3_inp__2Og7a\",\"but\":\"Component3_but__3N8tP\",\"listNames\":\"Component3_listNames__3lTg0\",\"NameItem\":\"Component3_NameItem__MBIBw\",\"error\":\"Component3_error__3skDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"NavBar_bar__32D5t\",\"barButton\":\"NavBar_barButton__1Jo72\",\"barButtonShow\":\"NavBar_barButtonShow__3EjPc\",\"barButtonHide\":\"NavBar_barButtonHide__1vTwC\",\"barPanel\":\"NavBar_barPanel__2hS1A\",\"hide\":\"NavBar_hide__cqKio\",\"activeLink\":\"NavBar_activeLink__3W2Gv\",\"barItem\":\"NavBar_barItem__3DM-B\"};"],"sourceRoot":""}