{"version":3,"sources":["ComponentSpINBut/Component3.module.css","MyComponent/MyComponent.module.css","Qualities/Quality/Quality.module.css","Qualities/Qualities.module.css","MyComponent/MyComponent.jsx","Qualities/Quality/Quality.jsx","Qualities/Qualities.jsx","ComponentSpINBut/Components3Parts/InnerSpan.jsx","ComponentSpINBut/Components3Parts/InnerButton.jsx","ComponentSpINBut/Components3Parts/InnerInput.jsx","ComponentSpINBut/Components3Parts/NameItem/NameItem.jsx","ComponentSpINBut/Components3Parts/InnerListOfNames.jsx","ComponentSpINBut/Component3.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","MyComponent","render","className","my","block","lastName","time","type","value","readOnly","React","Component","Quality","props","activeSkill","skill","Qualities","builder","arraySkills","map","el","i","numberSkill","key","qua","active_block","quaS","InnerSpan","style","sp","nameCounter","InnerButton","but","onClick","getName","InnerInput","inp","ref","inputNameRef","NameItem","name","InnerListOfNames","nameElements","listOfNames","listNames","Component3","createRef","currentName","current","getNameForAlert","componet3","state","length","App","ChooseActiveSkill","newName","newNames","setState","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdeb6c80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"componet3\":\"Component3_componet3__2Safo\",\"sp\":\"Component3_sp__29fvB\",\"inp\":\"Component3_inp__3RCIv\",\"but\":\"Component3_but__E3q32\",\"listNames\":\"Component3_listNames__20edd\",\"NameItem\":\"Component3_NameItem__2D2RK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"MyComponent_block__2tIsA\",\"time\":\"MyComponent_time__3FT1w\",\"lastName\":\"MyComponent_lastName__1TVBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Quality_block__2JeKV\",\"active_block\":\"Quality_active_block__PUzae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Qualities_block__79j_A\"};","import React from 'react';\nimport my from './MyComponent.module.css'\n\nclass MyComponent extends React.Component {\n\n    render = () => {\n        return (\n            <div className={my.block}>\n                <div className={my.lastName}>Tuz Dmitry</div>\n                <div>домашка от меня №1: создать проект и выложить на github:\n                    - создать компоненту, которая красиво будет выводить ваше ФИО\n                    - *** создать компоненту, которая будет выводить текст, стилизованно как в телеграмме (имя, текст,\n                    время, уголок)\n                </div>\n                <input className={my.time} type=\"time\" value=\"12:15\" readOnly/>\n            </div>\n        );\n    }\n}\n\nexport default MyComponent;\n","import React from 'react';\n// import qua from './Quality.module.css'\n\n\nclass Quality extends React.Component {\n\n    render = () => {\n\n\n        return (\n            <div className={this.props.activeSkill}>\n                <div>{this.props.skill}</div>\n                <div>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div>\n            </div>\n        );\n    }\n}\n\nexport default Quality;\n","import React from 'react';\nimport quaS from './Qualities.module.css'\nimport Quality from \"./Quality/Quality\";\nimport qua from \"./Quality/Quality.module.css\";\n\nclass Qualities extends React.Component {\n    render = () => {\n\n        // let arraySkills=[{skill:\"рационалист\"},{skill:\"комуннист\"},{skill:\"анимешник\"}];\n        let builder = this.props.arraySkills.map((el, i) => {\n                if (i === this.props.numberSkill) {\n                    return (\n                        <Quality key={i} skill={el.skill} activeSkill={`${qua.block} ${qua.active_block}`}/>\n                    )\n                } else {\n                    return (\n                        <Quality skill={el.skill} activeSkill={qua.block}/>\n                    )\n                }\n            }\n        );\n\n\n        return (\n            <div className={quaS.block}>\n                {builder}\n                {/*<Quality skill={this.props.arraySkills[0].skill}/>*/}\n                {/*<Quality skill={this.props.arraySkills[1].skill}/>*/}\n                {/*<Quality skill={this.props.arraySkills[2].skill}/>*/}\n            </div>\n        );\n    }\n}\n\nexport default Qualities;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerSpan extends React.Component {\n\n\n\n    render = () => {\n        return (\n            <div className=\"\">\n                <span className={style.sp}>{this.props.nameCounter}</span>\n            </div>\n        );\n    }\n}\n\nexport default InnerSpan;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerButton extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className=\"\">\n                <button className={style.but} onClick={this.props.getName}>Push me</button>\n            </div>\n        );\n    }\n}\n\nexport default InnerButton;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\n\nclass InnerInput extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className=\"\">\n                <input className={style.inp} ref={this.props.inputNameRef} type=\"text\" />\n            </div>\n        );\n    }\n}\n\nexport default InnerInput;\n","import React from 'react';\n\nimport style from '../../Component3.module.css'\n\nclass NameItem extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className={style.NameItem}>{this.props.name}</div>\n        );\n    }\n}\n\nexport default NameItem;\n","import React from 'react';\n\nimport style from '../Component3.module.css'\nimport NameItem from \"./NameItem/NameItem\";\n\nclass InnerListOfNames extends React.Component {\n\n    render = () => {\n\n        let nameElements = this.props.listOfNames.map(el => <NameItem name={el.name}/>)\n\n\n        return (\n            <div className={style.listNames}>\n                {nameElements}\n            </div>\n        );\n    }\n}\n\nexport default InnerListOfNames;\n","import React from 'react';\n\nimport style from './Component3.module.css'\nimport InnerSpan from \"./Components3Parts/InnerSpan\";\nimport InnerButton from \"./Components3Parts/InnerButton\";\nimport InnerInput from \"./Components3Parts/InnerInput\";\nimport InnerListOfNames from \"./Components3Parts/InnerListOfNames\";\n\nclass Component3 extends React.Component {\n    inputNameRef = React.createRef();\n\n    getName = () => {\n        let currentName = this.inputNameRef.current.value;\n        this.props.getNameForAlert(currentName)\n        this.inputNameRef.current.value = \"\";\n    }\n\n    render = () => {\n        return (\n            <div className={style.componet3}>\n                <div>\n                    <InnerSpan nameCounter={this.props.state.listOfNames.length}/>\n\n                    <InnerInput inputNameRef={this.inputNameRef}/>\n\n                    <InnerButton getName={this.getName}/>\n                </div>\n\n                <InnerListOfNames listOfNames={this.props.state.listOfNames}/>\n            </div>\n        );\n    }\n}\n\nexport default Component3;\n","import React from 'react';\nimport './App.css';\nimport MyComponent from \"./MyComponent/MyComponent\";\nimport Qualities from \"./Qualities/Qualities\";\nimport Component3 from \"./ComponentSpINBut/Component3\";\n\nclass App extends React.Component {\n\n    arraySkills =\n        [\n            {skill: \"рационалист\"},\n            {skill: \"комуннист\"},\n            {skill: \"анимешник\"}\n        ];\n\n    ChooseActiveSkill = 0;\n\n    state = {\n        listOfNames: [\n            // {name: \"Alla\"},\n            // {name: \"Sasha\"}\n        ]\n    };\n\n\n    getNameForAlert = (currentName) => {\n        if (currentName) {\n\n            let newName = {name: currentName}\n            let newNames = [...this.state.listOfNames, newName];\n\n            this.setState({listOfNames: newNames});\n            // alert(currentName);\n        }\n    }\n\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <MyComponent/>\n                <Qualities arraySkills={this.arraySkills} numberSkill={this.ChooseActiveSkill}/>\n                <Component3 state={this.state}\n                            getNameForAlert={this.getNameForAlert}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}